# FULL Google Colab Notebook: Decision Tree on Bank Marketing Dataset

# STEP 1: Import Libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import zipfile
import os
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn import tree

# STEP 2: Upload and Extract the Zip File
from google.colab import files
uploaded = files.upload()

# Find uploaded filename
dataset_zip = list(uploaded.keys())[0]

# Extract the zip file
with zipfile.ZipFile(dataset_zip, 'r') as zip_ref:
    zip_ref.extractall('/content/bank_data')

# STEP 3: Check Extracted Files
print(os.listdir('/content/bank_data'))

# STEP 4: Load Dataset (assuming 'bank-additional-full.csv')
df = pd.read_csv('/content/bank_data/bank-additional-full.csv', sep=';')

# View first 5 rows
df.head()

# STEP 5: Preprocessing - Encode Categorical Features
le = LabelEncoder()
for column in df.columns:
    if df[column].dtype == 'object':
        df[column] = le.fit_transform(df[column])

# STEP 6: Split Data
X = df.drop('y', axis=1)
y = df['y']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# STEP 7: Build and Train Decision Tree Classifier
dt_model = DecisionTreeClassifier(criterion='entropy', max_depth=5, random_state=42)
dt_model.fit(X_train, y_train)

# STEP 8: Make Predictions
y_pred = dt_model.predict(X_test)

# STEP 9: Evaluate the Model
print("Accuracy:", accuracy_score(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Classification Report
print(classification_report(y_test, y_pred))

# STEP 10: Visualize Decision Tree
plt.figure(figsize=(20,10))
tree.plot_tree(dt_model, feature_names=X.columns, class_names=['No', 'Yes'], filled=True)
plt.show()
